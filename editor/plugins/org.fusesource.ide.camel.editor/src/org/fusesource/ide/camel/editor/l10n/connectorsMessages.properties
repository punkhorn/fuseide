##
# NOTE - this file is auto-generated.
#
# DO NOT ADD NEW PROPERTIES! ONLY EDIT EXISTING ONES! 
#
#Wed Oct 29 12:13:47 CET 2014
ahc_connector_description=HTTP based endpoint for consuming external HTTP resources (as a client to call external servers using HTTP).
ahc_connector_title=Async Http Client (AHC)
amqp_connector_description=Supports the AMQP protocol using the Client API of the Qpid project.
amqp_connector_title=AMQP
apns_connector_description=Supports sending notifications to Apple Push Notification Servers (APNS) and consuming feedback from the servers.
apns_connector_title=APNS
atom_connector_description=Used for polling Atom feeds.
atom_connector_title=ATOM Feeds
avro_connector_description=Provides a dataformat for avro, which allows serialization and deserialization of messages using Apache Avro's binary dataformat. Moreover, it provides support for Apache Avro's rpc, by providing producers and consumers endpoint for using avro over netty or http.
avro_connector_title=Avro
aws_cw_connector_description=The CW component allows messages to be sent to an Amazon CloudWatch metrics. The implementation of the Amazon API is provided by the AWS SDK.
aws_cw_connector_title=Amazon CloudWatch
aws_ddb_connector_description=The DynamoDB component supports storing and retrieving data from/to Amazon's DynamoDB service.
aws_ddb_connector_title=Amazon DynamoDB
aws_s3_connector_description=The S3 component supports storing and retrieving objetcs from/to Amazon's S3 service.
aws_s3_connector_title=Amazon S3
aws_sdb_connector_description=The sdb component supports storing and retrieving data from/to Amazon's SDB service.
aws_sdb_connector_title=Amazon SDB
aws_ses_connector_description=The ses component supports sending emails with Amazon's SES service.
aws_ses_connector_title=Amazon SES
aws_sns_connector_description=The SNS component allows messages to be sent to an Amazon Simple Notification Topic. The implementation of the Amazon API is provided by the AWS SDK.
aws_sns_connector_title=Amazon SNS
aws_sqs_connector_description=The sqs component supports sending and receiving messages to Amazon's SQS service.
aws_sqs_connector_title=Amazon SQS
aws_swf_connector_description=The Simple Workflow component supports managing workflows from Amazon's Simple Workflow service.
aws_swf_connector_title=Amazon SWF
bean_connector_description=The bean component binds beans to Camel message exchanges.
bean_connector_title=Bean
bean_validator_connector_description=Performs bean validation of the message body using the Java Bean Validation API (JSR 303). Camel uses the reference implementation, which is Hibernate Validator.
bean_validator_connector_title=Bean Validation
binding_connector_description=In Camel terms a binding is a way of wrapping an Endpoint in a contract; such as a Data Format, a Content Enricher or validation step. Bindings are completely optional and you can choose to use them on any camel endpoint.
binding_connector_title=Binding
browse_connector_description=The Browse component provides a simple BrowsableEndpoint which can be useful for testing, visualization tools or debugging. The exchanges sent to the endpoint are all available to be browsed.
browse_connector_title=Browse
cache_connector_description=Performs caching operations using EHCache as the Cache Implementation. The cache itself is created on demand or if a cache of that name already exists then it is simply utilized with its original settings.
cache_connector_title=Cache
class_connector_description=The class component binds beans to Camel message exchanges. It works in the same way as the Bean component but instead of looking up beans from a Registry it creates the bean based on the class name.
class_connector_title=Class
cmis_connector_description=Uses the Apache Chemistry client API and allows you to add/read nodes to/from a CMIS compliant content repositories.
cmis_connector_title=CMIS
cometd_connector_description=The cometd component is a transport for working with the jetty implementation of the cometd/bayeux protocol. Using this component in combination with the dojo toolkit library it's possible to push Camel messages directly into the browser using an AJAX based mechanism.
cometd_connector_title=Cometd
context_connector_description=Allows you to create new Camel Components from a CamelContext with a number of routes which is then treated as a black box, allowing you to refer to the local endpoints within the component from other CamelContexts.
context_connector_title=Context
controlbus_connector_description=The controlbus component provides easy management of Camel applications based on the Control Bus EIP pattern.
controlbus_connector_title=ControlBus
couchdb_connector_description=Allows you to treat CouchDB instances as a producer or consumer of messages. (using the lightweight LightCouch API)
couchdb_connector_title=CouchDB
crypto_connector_description=With Camel cryptographic endpoint and Java's Cryptographic extension it is easy to create Digital Signatures for Exchanges. Camel provides a pair of flexible endpoints which get used in concert to create a signature for an exchange in one part of the exchange's workflow and then verify the signature in a later part of the workflow.
crypto_connector_title=Crypto
cxf_connector_description=Provides integration with Apache CXF for connecting to JAX-WS services hosted in CXF.
cxf_connector_title=CXF
cxfbean_connector_description=The cxfbean component allows other Camel endpoints to send exchange and invoke Web service bean objects. Currently, it only supports JAX-RS and JAX-WS (new to Camel 2.1) annotated service beans.
cxfbean_connector_title=CXF Bean
cxfrs_connector_description=The cxfrs component provides integration with Apache CXF for connecting to JAX-RS services hosted in CXF.
cxfrs_connector_title=CXF RS
dataformat_connector_description=The dataformat component allows to use Data Format as a Camel Component.
dataformat_connector_title=Data Format
dataset_connector_description=The DataSet component provides a mechanism to easily perform load & soak testing of your system. It works by allowing you to create DataSet instances both as a source of messages and as a way to assert that the data set is received.
dataset_connector_title=DataSet
direct_connector_description=The direct component provides direct, synchronous invocation of any consumers when a producer sends a message exchange.
direct_connector_title=Direct
direct_vm_connector_description=The direct-vm component provides direct, synchronous invocation of any consumers in the JVM when a producer sends a message exchange. This endpoint can be used to connect existing routes in the same camel context, as well from other camel contexts in the same JVM.
direct_vm_connector_title=Direct VM
disruptor_connector_description=Provides asynchronous SEDA behavior much as the standard SEDA Component, but utilizes a Disruptor instead of a BlockingQueue utilized by the standard SEDA.
disruptor_connector_title=Disruptor
disruptor_vm_connector_description=disruptor-vm endpoint is supported by this component, providing an alternative to the standard VM. As with the SEDA component, buffers of the disruptor\: endpoints are only visible within a single CamelContext and no support is provided for persistence or recovery. The buffers of the *disruptor-vm\:* endpoints also provides support for communication across CamelContexts instances so you can use this mechanism to communicate across web applications (provided that camel-disruptor.jar is on the system/boot classpath).
disruptor_vm_connector_title=Disruptor VM
dns_connector_description=Offers the following operations\: ip (to resolve a domain by its ip), lookup (to lookup information about the domain) and dig (to run DNS queries).
dns_connector_title=DNS
ejb_connector_description=Binds EJBs to Camel message exchanges.
ejb_connector_title=EJB
elasticsearch_connector_description=Allows you to interface with an ElasticSearch server.
elasticsearch_connector_title=ElasticSearch
exec_connector_description=Used to execute system commands.
exec_connector_title=Execute
facebook_connector_description=Provides access to all of the Facebook APIs accessible using Facebook4J. It allows producing messages to retrieve, add, and delete posts, likes, comments, photos, albums, videos, photos, checkins, locations, links, etc. It also supports APIs that allow polling for posts, users, checkins, groups, locations, etc.
facebook_connector_title=Facebook
file_connector_description=The File component provides access to file systems, allowing files to be processed by any other Camel Components or messages from other components to be saved to disk.
file_connector_title=Filesystem
flatpack_connector_description=Supports fixed width and delimited file parsing via the FlatPack library.
flatpack_connector_title=FlatPack
fop_connector_description=Allows you to render a message into different output formats using Apache FOP.
fop_connector_title=FOP
freemarker_connector_description=Allows for processing a message using a FreeMarker template. This can be ideal when using Templating to generate responses for requests.
freemarker_connector_title=FreeMarker
ftp_connector_description=Provides access to remote file systems over the FTP, FTPS and SFTP protocols.
ftp_connector_title=FTP
ftps_connector_description=This component provides access to remote file systems over the FTP and SFTP protocols.
ftps_connector_title=FTPS
gauth_connector_description=The gauth component is used by web applications to implement a Google-specific OAuth consumer. It will be later extended to support other OAuth providers as well. Although this component belongs to the Camel Components for Google App Engine (GAE), it can also be used to OAuth-enable non-GAE web applications. For a detailed description of Google's OAuth implementation refer to the Google OAuth API reference.
gauth_connector_title=Google OAuth
geocoder_connector_description=Used for looking up geocodes (latitude and longitude) for a given address, or reverse lookup. The component uses the Java API for Google Geocoder library.
geocoder_connector_title=Geocoder
ghttp_connector_description=The ghttp component contributes to the Camel Components for Google App Engine (GAE). It provides connectivity to the GAE URL fetch service but can also be used to receive messages from servlets (the only way to receive HTTP requests on GAE). This is achieved by extending the Servlet component. As a consequence, ghttp URI formats and options sets differ on the consumer-side (from) and producer-side (to). 
ghttp_connector_title=Google HTTP
glogin_connector_description=The glogin component is used by Camel applications outside Google App Engine (GAE) for programmatic login to GAE applications. It is part of the Camel Components for Google App Engine. Security-enabled GAE applications normally redirect the user to a login page. After submitting username and password for authentication, the user is redirected back to the application.
glogin_connector_title=Google Login
gmail_connector_description=The gmail component contributes to the Camel Components for Google App Engine (GAE). It supports sending of emails via the GAE mail service. Receiving mails is not supported yet but will be added later. Currently, only Google accounts that are application administrators can send emails.
gmail_connector_title=Google Mail
gtask_connector_description=The gtask component contributes to the Camel Components for Google App Engine (GAE). It supports asynchronous message processing on GAE by using the task queueing service as message queue. For adding messages to a queue it uses the task queue API. For receiving messages from a queue it installs an HTTP callback handler. The handler is called by an HTTP POST callback (a web hook) initiated by the task queueing service. Whenever a new task is added to a queue a callback will be sent. The gtask component abstracts from these details and supports endpoint URIs that make message queueing on GAE as easy as message queueing with JMS or SEDA.
gtask_connector_title=Google Task
guava_eventbus_connector_description=Provides integration bridge between Camel and Google Guava EventBus infrastructure. With the latter component, messages exchanged with the Guava EventBus can be transparently forwarded to the Camel routes. EventBus component allows also to route body of Camel exchanges to the Guava EventBus.
guava_eventbus_connector_title=Guava EventBus
hazelcast_connector_description=Allows you to work with the Hazelcast distributed data grid / cache. Hazelcast is a in memory data grid, entirely written in Java (single jar). It offers a great palette of different data stores like map, multi map (same key, n values), queue, list and atomic number. The main reason to use Hazelcast is its simple cluster support. If you have enabled multicast on your network you can run a cluster with hundred nodes with no extra configuration. Hazelcast can simply configured to add additional features like n copies between nodes (default is 1), cache persistence, network configuration (if needed), near cache, enviction and so on. For more information consult the Hazelcast documentation on http\://www.hazelcast.com/docs.jsp.
hazelcast_connector_title=Hazelcast
hbase_connector_description=Provides an idempotent repository, producers and consumers for Apache HBase.
hbase_connector_title=HBase
hdfs2_connector_description=Enables you to read and write messages from/to an HDFS file system using Hadoop 2.x. HDFS is the distributed file system at the heart of Apache Hadoop.
hdfs2_connector_title=HDFS2
hdfs_connector_description=Enables you to read and write messages from/to an HDFS file system. HDFS is the distributed file system at the heart of Apache Hadoop.
hdfs_connector_title=HDFS
http4_connector_description=The http4 component provides HTTP based endpoints for calling external HTTP resources (as a client to call external servers using HTTP).
http4_connector_title=HTTP4
http_connector_description=The http component provides HTTP based endpoints for consuming external HTTP resources (as a client to call external servers using HTTP).
http_connector_title=HTTP
ibatis_connector_description=Allows you to query, poll, insert, update and delete data in a relational database using Apache iBATIS.
ibatis_connector_title=iBATIS
infinispan_connector_description=Allows you to interact with Infinispan distributed data grid / cache. Infinispan is an extremely scalable, highly available key/value data store and data grid platform written in Java.
infinispan_connector_title=Infinispan
irc_connector_description=Allows you to interact with an IRC server.
irc_connector_title=IRC
javaspace_connector_description=Allows you working with any JavaSpace compliant implementation and has been tested with both the Blitz implementation and the GigaSpace implementation .
javaspace_connector_title=JavaSpace
jclouds_connector_description=Allows interaction with cloud provider key-value engines (blobstores) and compute services. The component uses jclouds which is a library that provides abstractions for blobstores and compute services.
jclouds_connector_title=JClouds
jcr_connector_description=Allows you to add/read nodes to/from a JCR compliant content repository (for example, Apache Jackrabbit) with its producer, or register an EventListener with the consumer.
jcr_connector_title=JCR
jdbc_connector_description=Enables you to access databases through JDBC, where SQL queries and operations are sent in the message body. This component uses the standard JDBC API, unlike the SQL Component component, which uses spring-jdbc.
jdbc_connector_title=JDBC
jetty_connector_description=provides HTTP-based endpoints for consuming and producing HTTP requests. That is, the Jetty component behaves as a simple Web server. Jetty can also be used as a http client which mean you can also use it with Camel as a producer.
jetty_connector_title=Jetty
jgroups_connector_description=Provides exchange of messages between Camel infrastructure and JGroups clusters.
jgroups_connector_title=JGroups
jms_connector_description=Allows messages to be sent to (or consumed from) a JMS Queue or Topic. The implementation of the JMS Component uses Spring's JMS support for declarative transactions, using Spring's JmsTemplate for sending and a MessageListenerContainer for consuming.
jms_connector_title=JMS
jmx_connector_description=Allows consumers to subscribe to an mbean's Notifications. The component supports passing the Notification object directly through the Exchange or serializing it to XML according to the schema provided within this project. This is a consumer only component. Exceptions are thrown if you attempt to create a producer for it.
jmx_connector_title=JMX
jpa_connector_description=Enables you to store and retrieve Java objects from persistent storage using EJB 3's Java Persistence Architecture (JPA), which is a standard interface layer that wraps Object/Relational Mapping (ORM) products such as OpenJPA, Hibernate, TopLink, and so on.
jpa_connector_title=JPA
jt400_connector_description=Allows you to exchanges messages with an AS/400 system using data queues.
jt400_connector_title=JT/400
kafka_connector_description=Used for communicating with Apache Kafka message broker.
kafka_connector_title=Kafka
kestrel_connector_description=Allows messages to be sent to a Kestrel queue, or messages to be consumed from a Kestrel queue. This component uses the spymemcached client for memcached protocol communication with Kestrel servers.
kestrel_connector_title=Kestrel
krati_connector_description=Allows the use Krati datastores and datasets inside Camel. Krati is a simple persistent data store with very low latency and high throughput. It is designed for easy integration with read-write-intensive applications with little effort in tuning configuration, performance and JVM garbage collection.
krati_connector_title=Krati
language_connector_description=The language component allows you to send Exchange to an endpoint which executes a script by any of the supported Languages in Camel. By having a component to execute language scripts, it allows more dynamic routing capabilities. For example by using the Routing Slip or Dynamic Router EIPs you can send messages to language endpoints where the script is dynamic defined as well.
language_connector_title=Language
ldap_connector_description=Allows you to perform searches in LDAP servers using filters as the message payload. This component uses standard JNDI (javax.naming package) to access the server. 
ldap_connector_title=LDAP
log_connector_description=The log component logs message exchanges to the underlying logging mechanism.
log_connector_title=Log
lpr_connector_description=The printer component provides a way to direct payloads on a route to a printer. Obviously the payload has to be a formatted piece of payload in order for the component to appropriately print it. The objective is to be able to direct specific payloads as jobs to a line printer in a camel flow.
lpr_connector_title=Printer
lucene_connector_description=The lucene component in camel facilitates integration and utilization of Lucene endpoints in enterprise integration patterns and scenarios. The lucene component builds a searchable index of documents when payloads are sent to the Lucene Endpoint and facilitates performing of indexed searches in Camel. This component only supports producer endpoints. 
lucene_connector_title=Lucene
mina2_connector_description=A transport for working with Apache MINA 2.x.
mina2_connector_title=MINA 2.x
mina_connector_description=A transport for working with Apache MINA 1.x.
mina_connector_title=MINA 1.x
mock_connector_description=The Mock component provides a powerful declarative testing mechanism, which is similar to jMock in that it allows declarative expectations to be created on any Mock endpoint before a test begins. Then the test is run, which typically fires messages to one or more endpoints, and finally the expectations can be asserted in a test case to ensure the system worked as expected. 
mock_connector_title=Mock
mongodb_connector_description=Integrates Camel with MongoDB allowing you to interact with MongoDB collections both as a producer (performing operations on the collection) and as a consumer (consuming documents from a MongoDB collection).
mongodb_connector_title=MongoDB
mqtt_connector_description=Used for communicating with MQTT compliant message brokers, like Apache ActiveMQ or Mosquitto.
mqtt_connector_title=MQTT
msv_connector_description=Performs XML validation of the message body using the MSV Library and any of the supported XML schema languages, such as XML Schema or RelaxNG XML Syntax. 
msv_connector_title=MSV
mustache_connector_description=Allows for processing a message using a Mustache template. This can be ideal when using Templating to generate responses for requests.
mustache_connector_title=Mustache
mvel_connector_description=Allows you to process a message using an MVEL template. This can be ideal when using Templating to generate responses for requests.
mvel_connector_title=MVEL
mybatis_connector_description=Allows you to query, poll, insert, update and delete data in a relational database using MyBatis.
mybatis_connector_title=MyBatis
nagios_connector_description=Allows you to send passive checks to Nagios.
nagios_connector_title=Nagios
netty_connector_description=Supports both producer and consumer endpoints, has several options and allows fine-grained control of a number of TCP/UDP communication parameters (buffer sizes, keepAlives, tcpNoDelay etc) and facilitates both In-Only and In-Out communication on a Camel route.
netty_connector_title=TCP / UDP (Netty)
netty_http_connector_description=An extension to Netty component to facilitiate HTTP transport with Netty.
netty_http_connector_title=Netty HTTP
optaplanner_connector_description=Solves the planning problem contained in a message with OptaPlanner.
optaplanner_connector_title=OptaPlanner
properties_connector_description=Provides access to properties.
properties_connector_title=Properties
quartz2_connector_description=Provides a scheduled delivery of messages using the Quartz Scheduler 2.x. Each endpoint represents a different timer (in Quartz terms, a Trigger and JobDetail).
quartz2_connector_title=Quartz 2.x
quartz_connector_description=Provides a scheduled delivery of messages using the Quartz Scheduler 1.x. Each endpoint represents a different timer (in Quartz terms, a Trigger and JobDetail).
quartz_connector_title=Quartz 1.x
quickfix_connector_description=The quickfix component adapts the QuickFIX/J FIX engine for using in Camel . This component uses the standard Financial Interchange (FIX) protocol for message transport.
quickfix_connector_title=QuickFIX/J
rabbitmq_connector_description=Allows you produce and consume messages from RabbitMQ instances. Using the RabbitMQ AMQP client, this component offers a pure RabbitMQ approach over the generic AMQP component.
rabbitmq_connector_title=RabbitMQ
ref_connector_description=The ref component is used for lookup of existing endpoints bound in the Registry.
ref_connector_title=Endpoint Lookup (Ref)
restlet_connector_description=Provides Restlet based endpoints for consuming and producing RESTful resources.
restlet_connector_title=Restlet
rmi_connector_description=Binds Exchanges to the RMI protocol (JRMP). Since this binding is just using RMI, normal RMI rules still apply regarding what methods can be invoked. This component supports only Exchanges that carry a method invocation from an interface that extends the Remote interface. All parameters in the method should be either Serializable or Remote objects.
rmi_connector_title=RMI
rnc_connector_description=The Jing component uses the Jing Library to perform XML validation of the message body using either
rnc_connector_title=RNC
rng_connector_description=The Jing component uses the Jing Library to perform XML validation of the message body using either
rng_connector_title=RNG
routebox_connector_description=The routebox endpoint performs the following key functions\: \nencapsulation - acts as a blackbox, hosting a collection of camel routes stored in an inner camel context. The inner context is fully under the control of the routebox component and is JVM bound.\nstrategy based indirection - direct payloads sent to the routebox endpoint along a camel route to specific inner routes based on a user defined internal routing strategy or a dispatch map.\nexchange propagation - forward exchanges modified by the routebox endpoint to the next segment of the camel route.
routebox_connector_title=Routebox
rss_connector_description=Used for polling RSS feeds. Camel will default poll the feed every 60 seconds.
rss_connector_title=RSS Feeds
salesforce_connector_description=Supports producer and consumer endpoints to communicate with Salesforce using Java DTOs. 
salesforce_connector_title=Salesforce
sap_netweaver_connector_description=The sap-netweaver integrates with the SAP NetWeaver Gateway using HTTP transports.
sap_netweaver_connector_title=SAP NetWeaver Gateway
scp_connector_description=The camel-jsch component supports the SCP protocol using the Client API of the Jsch project. Jsch is already used in camel by the FTP component for the sftp\: protocol.
scp_connector_title=SCP
seda_connector_description=The seda component provides asynchronous SEDA behavior, so that messages are exchanged on a BlockingQueue and consumers are invoked in a separate thread from the producer.
seda_connector_title=SEDA
servlet_connector_description=Provides HTTP based endpoints for consuming HTTP requests that arrive at a HTTP endpoint that is bound to a published Servlet.
servlet_connector_title=Servlet
sftp_connector_description=This component provides access to remote file systems over the FTP and SFTP protocols.
sftp_connector_title=SFTP
sip_connector_description=Supports the SIP Publish and Subscribe capability as described in the RFC3903 - Session Initiation Protocol (SIP) Extension for Event.
sip_connector_title=SIP
sjms_connector_description=The Simple JMS Component, or SJMS, is a JMS client for use with Camel that uses well known best practices when it comes to JMS client creation and configuration. SJMS contains a brand new JMS client API written explicitly for Camel eliminating third party messaging implementations keeping it light and resilient.
sjms_connector_title=SJMS
smpp_connector_description=This component provides access to an SMSC (Short Message Service Center) over the SMPP protocol to send and receive SMS. The JSMPP is used.
smpp_connector_title=SMPPS
smtp_connector_description=The mail component provides access to Email via Spring's Mail support and the underlying JavaMail system.
smtp_connector_title=SMTP
snmp_connector_description=Enables you to poll SNMP capable devices or receiving traps.
snmp_connector_title=SNMP
solr_connector_description=Allows you to interface with an Apache Lucene Solr server (based on SolrJ 3.5.0).
solr_connector_title=Lucene Solr
splunk_connector_description=Provides access to Splunk using the Splunk provided client api, and it enables you to publish and search for events in Splunk.
splunk_connector_title=Splunk
spring_batch_connector_description=Support classes provide integration bridge between Camel and Spring Batch infrastructure.
spring_batch_connector_title=Spring Batch
spring_event_connector_description=The spring-event component provides access to the Spring ApplicationEvent objects. This allows you to publish ApplicationEvent objects to a Spring ApplicationContext or to consume them. You can then use Enterprise Integration Patterns to process them such as Message Filter.
spring_event_connector_title=Spring Event
spring_integration_connector_description=Provides a bridge for Camel components to talk to spring integration endpoints.
spring_integration_connector_title=Spring Integration
spring_ldap_connector_description=Provides a Camel wrapper for Spring LDAP.
spring_ldap_connector_title=Spring LDAP
spring_redis_connector_description=Allows sending and receiving messages from Redis. Redis is advanced key-value store where keys can contain strings, hashes, lists, sets and sorted sets. In addition it provides pub/sub functionality for inter-app communications.
spring_redis_connector_title=Spring Redis
spring_ws_connector_description=Allows you to integrate with Spring Web Services. It offers both client-side support, for accessing web services, and server-side support for creating your own contract-first web services.
spring_ws_connector_title=Spring Web Services
sql_connector_description=Allows you to work with databases using JDBC queries. The difference between this component and JDBC component is that in case of SQL the query is a property of the endpoint and it uses message payload as parameters passed to the query.
sql_connector_title=SQL
ssh_connector_description=Enables access to SSH servers such that you can send an SSH command, and process the response.
ssh_connector_title=SSH
stax_connector_description=Allows messages to be processed through a SAX ContentHandler.
stax_connector_title=StAX
stomp_connector_description=Used for communicating with Stomp compliant message brokers like Apache ActiveMQ or Apache ActiveMQ Apollo.
stomp_connector_title=Stomp
stream_connector_description=Provides access to the System.in, System.out and System.err streams as well as allowing streaming of file and URL.
stream_connector_title=Stream
string_template_connector_description=The string-template\: component allows you to process a message using a String Template. This can be ideal when using Templating to generate responses for requests.
string_template_connector_title=String Template
stub_connector_description=The stub component provides a simple way to stub out any physical endpoints while in development or testing, allowing you for example to run a route without needing to actually connect to a specific SMTP or Http endpoint. Just add stub\: in front of any endpoint URI to stub out the endpoint. 
stub_connector_title=Stub
test_connector_description=The test component extends the Mock component to support pulling messages from another endpoint on startup to set the expected message bodies on the underlying Mock endpoint. That is, you use the test endpoint in a route and messages arriving on it will be implicitly compared to some expected messages extracted from some other location.
test_connector_title=Test
timer_connector_description=The timer component is used to generate message exchanges when a timer fires You can only consume events from this endpoint. 
timer_connector_title=Timer
twitter_connector_description=Enables access to the most useful features of the Twitter API by encapsulating Twitter4J. It allows direct, polling, or event-driven consumption of timelines, users, trends, and direct messages. Also, it supports producing messages as status updates or direct messages.
twitter_connector_title=Twitter
validator_connector_description=The Validation component performs XML validation of the message body using the JAXP Validation API and based on any of the supported XML schema languages, which defaults to XML Schema.
validator_connector_title=Validator
velocity_connector_description=Allows you to process a message using an Apache Velocity template. This can be ideal when using Templating to generate responses for requests.
velocity_connector_title=Velocity
vertx_connector_description=Used for working with the Vertx EventBus. The vertx EventBus sends and receives JSON events.
vertx_connector_title=Vertx
vm_connector_description=The vm component provides asynchronous SEDA behavior, exchanging messages on a BlockingQueue and invoking consumers in a separate thread pool.
vm_connector_title=VM
weather_connector_description=Used for polling weather information from Open Weather Map - a site that provides free global weather and forecast information. The information is returned as a json String object.
weather_connector_title=Weather
websocket_connector_description=Provides websocket endpoints for communicating with clients using websocket. The component uses Eclipse Jetty Server which implements the IETF specification (drafts and RFC 6455). It supports the protocols ws\:// and wss\://. To use wss\:// protocol, the SSLContextParameters must be defined.
websocket_connector_title=Websocket
xmlrpc_connector_description=This component provides a dataformat for xml, which allows serialization and deserialization of request messages and response message using Apache XmlRpc's binary dataformat. You can also invoke the XMLRPC Service through the camel-xmlrpc producer.
xmlrpc_connector_title=XML RPC
xmlsecurity_connector_description=Generate and validate XML signatures as described in the W3C standard XML Signature Syntax and Processing or as described in the successor version 1.1. For XML Encryption support, please refer to the XML Security Data Format.
xmlsecurity_connector_title=XML Security
xmpp_connector_description=Interact with XMPP servers. Supports both room based and private person-person conversations.
xmpp_connector_title=XMPP (Jabber)
xquery_connector_description=The xquery component allows you to process a message using an XQuery template. This can be ideal when using Templating to generate respopnses for requests.
xquery_connector_title=XQuery
xslt_connector_description=The xslt component allows you to process a message using an XSLT template. This can be ideal when using Templating to generate respopnses for requests.
xslt_connector_title=XSLT
yammer_connector_description=Allows you to interact with the Yammer enterprise social network. Consuming messages, users, and user relationships is supported as well as creating new messages.
yammer_connector_title=Yammer
zookeeper_connector_description=Allows interaction with an Apache ZooKeeper cluster 
zookeeper_connector_title=ZooKeeper
